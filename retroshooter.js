function Projectile(x, y, strength, owner) {
  this.x = x || 0
  this.y = y || 0
  this.strength = strength || 5
  this.owner = owner || "player"
  this.destroyed = false
  this.direction = 1  // can be -1 for enemy projectiles

  this.boundaries = function() {
    r = strength / 2.0
    return {
      x: x - r,
      y: y - r,
      x2: x + r,
      y2: y + r
    }
  }
}

function Ship(x, y, name, colour, multiplicator, baseSize) {
  if ( !(this instanceof Ship) ) return new Ship()

  this.x = x || 0
  this.y = y || 0
  this.name = name || "enemy"
  this.colour = colour || "#F00"
  this.multiplicator = multiplicator || 1
  this.baseHitpoints = 100 * this.multiplicator
  this.hitpoints = this.baseHitpoints
  this.destroyed = false
  this.baseSize = (20 || baseSize) * this.multiplicator

  this.boundaries = function() {
    return {
      x: this.x,
      y: this.y,
      x2: this.x + this.baseSize,
      y2: this.y + this.baseSize
    }
  }

  this.collides_with = function(boundaries) {
    var own_boundaries = this.boundaries(),
        left1 = own_boundaries.x,
        left2 = boundaries.x,
        right1 = own_boundaries.x2,
        right2 = boundaries.x2,
        top1 = own_boundaries.y,
        top2 = boundaries.y,
        bottom1 = own_boundaries.y2,
        bottom2 = boundaries.y2

    if(right1 < left2 || left1 > right2) return false
    if(bottom1 < top2 || top1 > bottom2) return false
    return true
  }

  this.hit = function(points) {
    this.hitpoints -= points
    if (this.hitpoints <= 0) {
      this.destroyed = true
      this.hitpoints = 0
    }
    this.redraw()
  }

  this.redraw = function() { /* empty for now */ }
}


function draw_enemy(ship) {
  ctx.globalAlpha = ship.hitpoints*1.0 / ship.baseHitpoints
  ctx.fillStyle = ship.colour
  ctx.strokeStyle = ship.colour
  ctx.beginPath()
  ctx.moveTo(ship.x, ship.y)
  ctx.lineTo(ship.x + ship.baseSize, ship.y)
  ctx.lineTo(ship.x + ship.baseSize/2.0, ship.y + ship.baseSize)
  ctx.closePath()
  ctx.fill()
  ctx.globalAlpha = 1.0
  ctx.stroke()
}

function run(ctx) {
  var lvl = 0,
      cycle = 0,
      msec_frame = 33,
      render_time = 0,
      enemyGenerationTime = 60,  // 60 frames = 2 seconds at 30FPS
      enemyTimeReducePerLevel = 3, // 3 frames => 0.1 second at 30FPS

      lvlIndicator = document.getElementById('level'),
      hitpointIndicator = document.getElementById('hitpoints'),
      fpsIndicator = document.getElementById('fps'),

      keyLeftPressed = false,
      keyRightPressed = false,
      keyUpPressed = false,
      keyDownPressed = false,
      keySpacePressed = false,
      isPaused = false,

      projectileBaseSize = 5,
      projectileCooldownSingle = 6,

      playerBaseSize = 15,
      enemyBaseSize = 20,

      playerHeat = 0,
      heatMaximum = 50,
      enemies = [],
      projectiles = [],
      player = new Ship(200, 470, "player", "#0F0", 1.0, playerBaseSize)

  player.acceleration = {h:0, v:0}
  draw_player()

  function draw_projectile(projectile) {
    ctx.globalAlpha = 1.0
    ctx.fillStyle = "#FF0"
    ctx.beginPath()
    ctx.arc(projectile.x, projectile.y, projectile.strength, 0, Math.PI*2, true)
    ctx.fill()
  }

  function draw_player() {
    ctx.globalAlpha = player.hitpoints*1.0 / player.baseHitpoints
    ctx.fillStyle = player.colour
    ctx.strokeStyle = player.colour
    ctx.beginPath();  
    ctx.arc(
      player.x , player.y,
      player.baseSize,
      Math.PI*0.5+0.8, Math.PI*0.5-0.8,
      false
    );
    ctx.closePath()
    ctx.fill();  
    ctx.globalAlpha = 1.0
    ctx.stroke()
  }

  function draw_heat() {
    var r, g = 0
    r = Math.round(255.0/heatMaximum*playerHeat)
    g = 255 - Math.round(255.0/heatMaximum*playerHeat)
    ctx.fillStyle = "rgb("+r+", "+g+", 0)"

    ctx.strokeRect(380, 10, 10, heatMaximum)
    ctx.fillRect(380, 10+heatMaximum-playerHeat, 10, playerHeat)
  }

  function obsolet_ship(element, index, array) {
    return (element.y <= 480 && !element.destroyed)
  }

  function obsolet_projectile(element, index, array) {
    return (element.y >= 0 && !element.destroyed)
  }

  function generateProjectile(owner) {
    projectile = new Projectile(owner.x, owner.y, 5, owner)
    projectiles.push(projectile)
  }

  /**
   * Enemy Generator
   *
   * Enemies are generated by according to the current level:
   * The decade is used for the number of ships generated each cycle.
   * The units are used to calculate the time until the next cycle.
   */
  function generateEnemies(count) {
    var r, x

    for(;count;count--) {
      var r = Math.random()
      var x = Math.random()*400 % 380
      if (r > 0.1) enemies.push(new Ship(x, -20+r))
      else enemies.push(new Ship(x, -50, "boss", "#F50", 3))
    }
  }

  function doKeyDown(evt) {
    if (evt.keyCode == 37) keyLeftPressed = true
    if (evt.keyCode == 39) keyRightPressed = true
    if (evt.keyCode == 38) keyUpPressed = true
    if (evt.keyCode == 40) keyDownPressed = true
    if (evt.keyCode == 32) keySpacePressed = true
    if (evt.keyCode == 80) isPaused = !isPaused   // P â†’ Pause
  }

  function doKeyUp(evt) {
    if (evt.keyCode == 37) keyLeftPressed = false
    if (evt.keyCode == 39) keyRightPressed = false
    if (evt.keyCode == 38) keyUpPressed = false
    if (evt.keyCode == 40) keyDownPressed = false
    if (evt.keyCode == 32) keySpacePressed = false
  }


  function cleanup() {
    // cleanup lost enemies
    enemies = enemies.filter(obsolet_ship)
    // cleanup lost bullets
    projectiles = projectiles.filter(obsolet_projectile)
  }

  function collison_detection() {
    for(i in enemies) {
      enemy = enemies[i]

      // look for projectiles hitting enemies
      for(i in projectiles) {
        projectile = projectiles[i]
        boundaries = {
          x: projectile.x,
          y: projectile.y,
          x2: projectile.x,
          y2: projectile.y
        }
        if(enemy.collides_with(boundaries)) {
          enemy.hit(projectile.strength*5)
          projectile.destroyed = true
        }
      }

      // look for enemies hitting the player
      if(enemy.collides_with(player.boundaries())) {
        enemy.hit(100)
        player.hit(25)
      }
    }
  }

  function calc_player_acceleration() {
    if(keyLeftPressed) player.acceleration.h-=6    // left
    if(keyUpPressed) player.acceleration.v-=6      // up
    if(keyRightPressed) player.acceleration.h+=6   // right
    if(keyDownPressed) player.acceleration.v+=6    // down

    h = player.acceleration.h
    v = player.acceleration.v

    if(h > 50)  h = 50
    if(h < -50) h =- 50
    if(v > 50)  v = 50
    if(v < -50) v =- 50

    player.x += h/10.0
    player.y += v/10.0
    
    if(player.x < 4) player.x = 4
    if(player.x > 396) player.x = 396
    if(player.y < 20) player.y = 20
    if(player.y > 476) player.y = 476

    if(h != 0) h<0 ? h++ : h--
    if(v != 0) v<0 ? v++ : v--

    player.acceleration.h = h
    player.acceleration.v = v
  }

  function render() {
    var d = new Date()
    var start_time = d.getTime()

    if(!isPaused && !player.destroyed) {
      ctx.clearRect(0,0,640,480)

      // TODO: should be way faster to draw every ship type once and just copy it
      for(i in enemies) {
        draw_enemy(enemies[i])
        enemies[i].y += 2.0 / enemies[i].multiplicator
      }

      for(i in projectiles) {
        draw_projectile(projectiles[i])
        projectiles[i].y -= (8.0 * projectiles[i].direction)
      }

      calc_player_acceleration()
      draw_player()

      if(keySpacePressed) {
        if(cycle % projectileCooldownSingle == 0 && playerHeat < heatMaximum) {
          generateProjectile(player) // shoot!
          if(playerHeat < heatMaximum) playerHeat++
        }
      }

      if(cycle%2 == 0) {
        cleanup()
        collison_detection()
      }

      // draw status information every 10th cycle (around 3x per second)
      if(cycle%10 == 0) {
        lvlIndicator.innerHTML = lvl
        hitpointIndicator.innerHTML = player.hitpoints
        if(render_time > msec_frame) fps = Math.round(1000.0/render_time)
        else fps = 30
        fpsIndicator.innerHTML = fps
      }
      // heat
      if(playerHeat > 0 && cycle%20 == 0) playerHeat--
      draw_heat()

      // calculate enemies
      decade = Math.floor(lvl/10) + 1
      units = (lvl % 10)
      modulo = enemyGenerationTime - enemyTimeReducePerLevel*units
      if(cycle%modulo == 0) generateEnemies(decade)

      // raise level every 303 frames (~10 seconds)
      if(cycle%303 == 0) raiseLevel()
    }

    if(player.destroyed) {
      ctx.clearRect(0,0,640,480)
      ctx.strokeText("GAME OVER", 20, 200)
    }

    cycle++

    d = new Date();
    render_time = d.getTime() - start_time
    if (render_time >= msec_frame) time_diff = 0
    else time_diff = msec_frame - render_time
          
    t = setTimeout(render, time_diff)
  }

  function raiseLevel() { lvl++ }

  ctx.globalCompositeOperation = 'destination-over'
  window.addEventListener('keydown', doKeyDown, false)
  window.addEventListener('keyup', doKeyUp, false)
  render()
}

